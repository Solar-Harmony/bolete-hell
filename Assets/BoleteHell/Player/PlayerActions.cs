//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/BoleteHell/Player/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""8ecdb25a-ead5-4b25-b3fb-a1a1926bb8cd"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""67fecb42-a5b3-4ec2-8e28-e87c74e600b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookAt"",
                    ""type"": ""Value"",
                    ""id"": ""3c1d180b-dac8-4a1a-9a1b-89632a45b271"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CycleShieldsForward"",
                    ""type"": ""Button"",
                    ""id"": ""3ab3048a-1a68-49d8-9a96-e6826da56623"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleShieldsBackwards"",
                    ""type"": ""Button"",
                    ""id"": ""43e38d70-a4d8-4714-a0c5-0606cbbdaee1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootRay"",
                    ""type"": ""Button"",
                    ""id"": ""d570d892-68cb-4f06-920a-631efa0472b7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DrawShield"",
                    ""type"": ""Button"",
                    ""id"": ""13627c06-0d8f-4bb7-ab51-186051df0de5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWeapons"",
                    ""type"": ""PassThrough"",
                    ""id"": ""356f2f95-8325-43de-9318-d8dec143cb5a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5044db4d-becc-44ce-92c8-4441ff5b4f07"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""474c6573-312b-4efd-b749-6dd3628ad66a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""611fe8e2-c891-47a4-9a7f-2f35baf0859a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dbac806d-279a-4106-9250-d7735882ddb0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3a33fe2b-879b-4822-a11d-651ca8784c5e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""44b6e048-dd57-4bdf-966d-c627235c2c7b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""LookAt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""469c9f0f-7def-4220-ba8a-30117b9c8d5a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""CycleShieldsForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""289f0503-ae8d-4109-a26b-71e94552fc0f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""CycleShieldsBackwards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8e25757-f5e5-4c40-9426-3811012d4c50"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""ShootRay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b4a32f3-292c-4aeb-9330-e205469abfcb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""DrawShield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""694fb9af-9cc2-4886-a434-b6b2dd644fcd"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KB+M"",
                    ""action"": ""ScrollWeapons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KB+M"",
            ""bindingGroup"": ""KB+M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Movement = m_Combat.FindAction("Movement", throwIfNotFound: true);
        m_Combat_LookAt = m_Combat.FindAction("LookAt", throwIfNotFound: true);
        m_Combat_CycleShieldsForward = m_Combat.FindAction("CycleShieldsForward", throwIfNotFound: true);
        m_Combat_CycleShieldsBackwards = m_Combat.FindAction("CycleShieldsBackwards", throwIfNotFound: true);
        m_Combat_ShootRay = m_Combat.FindAction("ShootRay", throwIfNotFound: true);
        m_Combat_DrawShield = m_Combat.FindAction("DrawShield", throwIfNotFound: true);
        m_Combat_ScrollWeapons = m_Combat.FindAction("ScrollWeapons", throwIfNotFound: true);
    }

    ~@PlayerActions()
    {
        UnityEngine.Debug.Assert(!m_Combat.enabled, "This will cause a leak and performance issues, PlayerActions.Combat.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_Movement;
    private readonly InputAction m_Combat_LookAt;
    private readonly InputAction m_Combat_CycleShieldsForward;
    private readonly InputAction m_Combat_CycleShieldsBackwards;
    private readonly InputAction m_Combat_ShootRay;
    private readonly InputAction m_Combat_DrawShield;
    private readonly InputAction m_Combat_ScrollWeapons;
    public struct CombatActions
    {
        private @PlayerActions m_Wrapper;
        public CombatActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Combat_Movement;
        public InputAction @LookAt => m_Wrapper.m_Combat_LookAt;
        public InputAction @CycleShieldsForward => m_Wrapper.m_Combat_CycleShieldsForward;
        public InputAction @CycleShieldsBackwards => m_Wrapper.m_Combat_CycleShieldsBackwards;
        public InputAction @ShootRay => m_Wrapper.m_Combat_ShootRay;
        public InputAction @DrawShield => m_Wrapper.m_Combat_DrawShield;
        public InputAction @ScrollWeapons => m_Wrapper.m_Combat_ScrollWeapons;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @LookAt.started += instance.OnLookAt;
            @LookAt.performed += instance.OnLookAt;
            @LookAt.canceled += instance.OnLookAt;
            @CycleShieldsForward.started += instance.OnCycleShieldsForward;
            @CycleShieldsForward.performed += instance.OnCycleShieldsForward;
            @CycleShieldsForward.canceled += instance.OnCycleShieldsForward;
            @CycleShieldsBackwards.started += instance.OnCycleShieldsBackwards;
            @CycleShieldsBackwards.performed += instance.OnCycleShieldsBackwards;
            @CycleShieldsBackwards.canceled += instance.OnCycleShieldsBackwards;
            @ShootRay.started += instance.OnShootRay;
            @ShootRay.performed += instance.OnShootRay;
            @ShootRay.canceled += instance.OnShootRay;
            @DrawShield.started += instance.OnDrawShield;
            @DrawShield.performed += instance.OnDrawShield;
            @DrawShield.canceled += instance.OnDrawShield;
            @ScrollWeapons.started += instance.OnScrollWeapons;
            @ScrollWeapons.performed += instance.OnScrollWeapons;
            @ScrollWeapons.canceled += instance.OnScrollWeapons;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @LookAt.started -= instance.OnLookAt;
            @LookAt.performed -= instance.OnLookAt;
            @LookAt.canceled -= instance.OnLookAt;
            @CycleShieldsForward.started -= instance.OnCycleShieldsForward;
            @CycleShieldsForward.performed -= instance.OnCycleShieldsForward;
            @CycleShieldsForward.canceled -= instance.OnCycleShieldsForward;
            @CycleShieldsBackwards.started -= instance.OnCycleShieldsBackwards;
            @CycleShieldsBackwards.performed -= instance.OnCycleShieldsBackwards;
            @CycleShieldsBackwards.canceled -= instance.OnCycleShieldsBackwards;
            @ShootRay.started -= instance.OnShootRay;
            @ShootRay.performed -= instance.OnShootRay;
            @ShootRay.canceled -= instance.OnShootRay;
            @DrawShield.started -= instance.OnDrawShield;
            @DrawShield.performed -= instance.OnDrawShield;
            @DrawShield.canceled -= instance.OnDrawShield;
            @ScrollWeapons.started -= instance.OnScrollWeapons;
            @ScrollWeapons.performed -= instance.OnScrollWeapons;
            @ScrollWeapons.canceled -= instance.OnScrollWeapons;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KB+M");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface ICombatActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLookAt(InputAction.CallbackContext context);
        void OnCycleShieldsForward(InputAction.CallbackContext context);
        void OnCycleShieldsBackwards(InputAction.CallbackContext context);
        void OnShootRay(InputAction.CallbackContext context);
        void OnDrawShield(InputAction.CallbackContext context);
        void OnScrollWeapons(InputAction.CallbackContext context);
    }
}
